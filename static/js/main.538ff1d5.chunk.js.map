{"version":3,"sources":["logo.svg","TodoList.js","TodoItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoList","item","key","text","className","onSubmit","this","props","addItem","type","placeholder","ref","inputElement","value","currentItem","onChange","handleInput","Component","TodoItems","createTasks","onClick","deleteItem","listItems","entries","map","App","e","target","Date","now","setState","console","log","preventDefault","newItem","state","items","filteredItems","filter","React","createRef","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,4IC2B5BC,G,+LAxBAC,GACP,OAAO,wBAAIC,IAAKD,EAAKC,KAAMD,EAAKE,Q,+BAIzB,OACP,yBAAKC,UAAU,gBACf,yBAAKA,UAAU,UACf,0BAAMC,SAAUC,KAAKC,MAAMC,SAC3B,2BACAC,KAAK,OACLC,YAAY,OACZC,IAAOL,KAAKC,MAAMK,aAClBC,MAAOP,KAAKC,MAAMO,YAAYX,KAC9BY,SAAUT,KAAKC,MAAMS,cAErB,4BAAQP,KAAK,UAAb,qB,GAjBeQ,cCiBRC,E,2MAfXC,YAAc,SAAAlB,GAAU,OACpB,wBAAIC,IAAKD,EAAKC,IAAKkB,QAAU,kBAAM,EAAKb,MAAMc,WAAWpB,EAAKC,OAC7DD,EAAKE,O,wEAMN,IACMmB,EADchB,KAAKC,MAAMgB,QACDC,IAAIlB,KAAKa,aAEvC,OAAO,wBAAIf,UAAU,WAAWkB,EAAzB,S,GAbSL,aCiETQ,E,YA5Db,aAAe,IAAD,8BACZ,+CAMFT,YAAc,SAAAU,GACZ,IACMZ,EAAc,CAAEX,KADLuB,EAAEC,OAAOd,MACaX,IAAK0B,KAAKC,OACjD,EAAKC,SAAS,CACZhB,gBAEFiB,QAAQC,IAAI,gBAbA,EAedxB,QAAU,SAAAkB,GACRA,EAAEO,iBACF,IAAMC,EAAU,EAAKC,MAAMrB,YAC3B,GAAsB,KAAjBoB,EAAQ/B,MAA+B,MAAhB+B,EAAQ/B,KAAa,CAC/C4B,QAAQC,IAAIE,GACZ,IAAME,EAAK,sBAAO,EAAKD,MAAMC,OAAlB,CAAyBF,IACpC,EAAKJ,SAAU,CACbM,MAAOA,EACPtB,YAAa,CAACX,KAAM,GAAKD,IAAK,MAGlC6B,QAAQC,IAAI,mBA1BA,EA6BdX,WAAa,SAAAnB,GACX,IAAMmC,EAAgB,EAAKF,MAAMC,MAAME,QAAO,SAAArC,GAC5C,OAAOA,EAAKC,MAAQA,KAEtB,EAAK4B,SAAU,CACbM,MAAOC,KAlCG,EAuCdzB,aAAe2B,IAAMC,YArCnB,EAAKL,MAAQ,CACXC,MAAO,GACPtB,YAAa,CAACX,KAAM,GAAID,IAAK,KAJnB,E,sEAyCH,OACT,yBAAKE,UAAU,OACf,kBAAC,EAAD,CACAI,QAASF,KAAKE,QACdI,aAAeN,KAAKM,aACpBI,YAAeV,KAAKU,YACpBF,YAAeR,KAAK6B,MAAMrB,cAG1B,kBAAC,EAAD,CACAS,QAAWjB,KAAK6B,MAAMC,MACtBf,WAAYf,KAAKe,kB,GArDHJ,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.538ff1d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react' ; \r\n\r\nclass TodoList extends Component {\r\n    createTask(item) {\r\n        return <li key={item.key}>{item.text}</li>\r\n    }\r\n    \r\n    \r\n    render() { return (\r\n        <div className=\"todoListMain\">\r\n        <div className=\"header\">\r\n        <form onSubmit={this.props.addItem}>\r\n        <input \r\n        type=\"text\" \r\n        placeholder=\"Task\"\r\n        ref = {this.props.inputElement} \r\n        value={this.props.currentItem.text}\r\n        onChange={this.props.handleInput}\r\n        />\r\n        <button type=\"submit\"> Add Task </button>\r\n        </form>\r\n        </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList ; ","import React, { Component  } from \"react\";\r\n\r\nclass TodoItems extends Component {\r\n\r\n    createTasks = item => { return (\r\n        <li key={item.key} onClick={ () => this.props.deleteItem(item.key)}> \r\n        {item.text}\r\n        </li>\r\n        )\r\n    }\r\n    \r\n    render() {\r\n        const todoEntries = this.props.entries ; \r\n        const listItems = todoEntries.map(this.createTasks) ; \r\n        \r\n        return <ul className=\"theList\">{listItems} </ul>\r\n    }\r\n}\r\n\r\nexport default TodoItems ; ","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TodoList from './TodoList' ; \nimport TodoItems from './TodoItems' ; \n\nclass App extends Component {\n  constructor() {\n    super() ;\n    this.state = {\n      items: [] ,\n      currentItem: {text: '', key: ''},\n    }\n  }\n  handleInput = e => {\n    const itemText = e.target.value ; \n    const currentItem = { text: itemText , key: Date.now() } ; \n    this.setState({\n      currentItem,\n    });\n    console.log('Hello Input') ; \n  }\n  addItem = e => {\n    e.preventDefault() ;\n    const newItem = this.state.currentItem ; \n    if ( newItem.text !== '' && newItem.text !==' ') {\n      console.log(newItem) ; \n      const items = [...this.state.items, newItem] ;\n      this.setState ({\n        items: items, \n        currentItem: {text: '' , key: ''} ,\n      })\n    }\n    console.log('Hello add item') ; \n  }\n\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== key\n    })\n    this.setState ({\n      items: filteredItems,\n    })\n  }\n\n\n  inputElement = React.createRef() ;\n  \n  render() { return (\n    <div className=\"App\">\n    <TodoList \n    addItem={this.addItem} \n    inputElement= {this.inputElement} \n    handleInput = {this.handleInput}\n    currentItem = {this.state.currentItem} \n    />\n\n    <TodoItems \n    entries = {this.state.items} \n    deleteItem={this.deleteItem}\n    />\n    </div>\n    ); \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}